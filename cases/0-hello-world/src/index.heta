include ./qsp-units.json type json

Vmax @Const = 0.1; // this is global constant available for any scoped equation
Km @Const = 2.5 {units: uM};

// this block unites elements with the same space
namespace mm begin
  '''Note for the Default compartment'''
  default_comp @Compartment { title: Default compartment, units: L };
  default_comp .= 1;

  S @Species { title: substrate, compartment: default_comp, units: uM };
  P @Species { title: product,  compartment: default_comp, units: uM };
  ''' Transformation of __substate__ to __product__ '''
  r1 @Reaction {
    title: Michaelis-Menten reaction,
    actors: S -> P,
    units: umole/min
  };

  r1 := Vmax*S/(Km+S)*default_comp; // S is used here but assigned below
  S .= 10; // S should be initialialized after creation
  P .= 0;
end

#importNS {
  fromSpace: nameless, 
  space: mm
};

#export {
  spaceFilter: mm,
  format: SBML,
  filepath: mm_sbml,
  version: L2V4
};
#export {
  spaceFilter: mm,
  format: Simbio,
  filepath: mm_simbio,
};
#export {
  spaceFilter: mm,
  format: JSON,
  filepath: full_json,
};
#export {
  spaceFilter: mm,
  format: YAML,
  filepath: full_yaml,
};
#export {
  spaceFilter: mm,
  format: SLV,
  filepath: mm_slv,
};
#export {
  spaceFilter: mm,
  format: SimSolver,
  filepath: mm_julia,
};
#export {
  spaceFilter: mm,
  format: DBSolve,
  filepath: mm_dbsolve,
};
#export {
  spaceFilter: mm,
  format: Mrgsolve,
  filepath: mm_mrg,
};
#export {
  spaceFilter: mm,
  format: Matlab,
  filepath: matlab1,
};

/* 
mm::mm_sbml @SBMLExport { title: Exported mm model};
mm::mm_simbio @SimbioExport;
mm::full_json @JSONExport;
mm::full_yaml @YAMLExport;
mm::mm_slv @SLVExport;
mm::mm_mrg @MrgsolveExport { title: export to mrgsolve };
mm::matlab1 @MatlabExport { filepath: matlab };
*/
