/*
  template file for creating platform
*/
// add qsp units
include ./qsp-units.heta;
t {units: h};

p1 @Record .= 1 {units: uM};
c1 @Compartment .= 3 {units: L};
c2 @Compartment .= 4 {units: mL};
c3 @Compartment .= 5 {units: m};

s1 @Species {compartment: c1, units: mM} .= 10;
s2 @Species {compartment: c2, units: mM} .= 10;
s3 @Species {compartment: c3, units: mmole/m} .= 10;

r1 @Reaction {actors: s1=>s2, units: mmole/h} := k1 * s1 * c1;
/*
d(s1*c1)/dt = - r1; left: mMole*L/minute, right: 1/h*mMole*h !!!
d(s2*c2)/dt = r1;   left: mMole*mL/minute, right: 1/h*mMole*h !!!
*/

#defineFunction pow7 {arguments: [x, y], math: "2*(x*pow(x, 7))"};
#defineFunction xx {arguments: [x, y], math: "x^8 + pow7(x, 1)"};
p2 @Record {units: mM*h^7} := 23*s1/xx(k1, 3);
k1 @Const = 1e-3 {units: 1/h};
k2 @Const = 1.1 {units: UL};

xxx #defineFunction {arguments: [x, y], math: "sin(x)*pow(y*1.2, 3)cos(x)"};
yyy #defineFunction {arguments: [x, y], math: "1 + sin(x) + y^3 + cos(x)"};
k21 @Const = 1 {units: metre};
k22 @Const = 1 {units: mole};
y21 @Record {units: metre^3} := k21^3 + xxx(1.1*2.2, k21);

// exports
#export { format: JSON, filepath: output };
//#export { format: YAML };
//#export { format: XLSX, omitRows: 3, splitByClass: true };
//#export { format: SBML, version: L2V4 };
//#export { format: SLV, eventsOff: false };
//#export { format: DBSolve };
//#export { format: Simbio };
//#export { format: Mrgsolve };
//#export { format: Matlab };
//#export { format: Julia };
