/*
  Testing Heta MathExpr base function transformation
  see export-formats.md#features-support
  see https://hetalang.github.io/#/specifications/math
*/

k1 @Const = 1e-3;
comp1 @Compartment .= 1;
s1 @Species { compartment: comp1 } .= 10;
r1 @Reaction { actors: s1 => } := k1*s1*comp1;

x @Const = 10;
y @Const = 10;
y1 @Const = 1;
y2 @Const = 2;
z @Const = 10;
base @Const = 10;
n @Const = 3;

// Arithmetic functions
p01 @Record 'abs(x)' := abs(x);
p02 @Record 'add(x, y)' := add(x, y);
p03 @Record 'ceil(x)' := ceil(x);
p04 @Record 'cube(x)' := cube(x);
p05 @Record 'divide(x, y)' := divide(x, y);
p06 @Record 'exp(x)' := exp(x);
p07 @Record 'floor(x)' := floor(x);
p08 @Record 'ln(x)' := ln(x);
p09 @Record 'log(x)' := log(x);
p10 @Record 'log(x, base)' := log(x, base);
p11 @Record 'log10(x)' := log10(x);
p12 @Record 'log2(x)' := log2(x);
p13 @Record 'multiply(x, y)' := multiply(x, y);
p14 @Record 'pow(x, y)' := "pow(x, y)";
p15 @Record 'sign(x)' := sign(x);
p16 @Record 'sqrt(x)' := sqrt(x);
p17 @Record 'nthRoot(x)' := nthRoot(x);
p18 @Record 'nthRoot(x, n)' := nthRoot(x, n);
p19 @Record 'square(x)' := square(x);
p20 @Record 'subtract(x, y)' := subtract(x, y);
p21 @Record 'min(x, y)' := min(x, y);
p22 @Record 'min(x, y, z)' := min(x, y, z);
p23 @Record 'max(x, y)' := max(x, y);
p24 @Record 'max(x, y, z)' := max(x, y, z);
p25 @Record 'factorial(n)' := factorial(n);  // doesn't work for: SLV, DBSolve
p26 @Record 'ifg0(x, y1, y2)' := ifg0(x, y1, y2);
p27 @Record 'ife0(x, y1, y2)' := ife0(x, y1, y2);
p28 @Record 'ifge0(x, y1, y2)' := ifge0(x, y1, y2);

// operators
o01 @Record 'x+y' := x+y;
o02 @Record 'x-y' := x-y;
o03 @Record 'x*y' := x*y;
o04 @Record 'x/y' := x/y;
o05 @Record 'x^y' := x^y;

// ternary operators
to01 @Record 'x > y ? y1 : y2' := x > y ? y1 : y2;  // doesn't work for: SLV, DBSolve
to02 @Record 'x >= y ? y1 : y2' := x >= y ? y1 : y2; // doesn't work for: SLV, DBSolve
to03 @Record 'x < y ? y1 : y2' := x < y ? y1 : y2; // doesn't work for: SLV, DBSolve
to04 @Record 'x <= y ? y1 : y2' := x <= y ? y1 : y2; // doesn't work for: SLV, DBSolve
to05 @Record 'x == y ? y1 : y2' := x == y ? y1 : y2; // doesn't work for: SLV, DBSolve
to06 @Record 'x != y ? y1 : y2' := x != y ? y1 : y2; // doesn't work for: SLV, DBSolve

#export {filepath: model, format: SLV};
#export {filepath: sbml, format: SBML};
