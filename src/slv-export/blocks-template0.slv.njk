{% extends "slv-export/template.slv.njk" %}
=========================== if/else in RHS ======================
{% block ifelseStatics %}{% for set in ifelseStatics %}
if({{ set.condition  }}){ {% for rule in set.ifPart %}
  {{ rule.id }} = {{ rule.rhs }};{% endfor %}
}else{}
{% endfor %}{% endblock %}
============================ output ======================
{% block outputVars %}{% for out in outputVars | sort %}{{ out }}  {% endfor %}{% endblock %}
================================ method ==========================
{% block dt %}{{ method.dt }}{% endblock %}
{% block abstol %}{{ method.abstol }}{% endblock %}
================================ Events ============================
{% block events %}{{ events.length }}{% for event in events %}
{{ event.id }}
{{ event.multiply }}
{{ event.add }}
{{ event.startingTime }}
{{ event.period }}
{{ event.on }}{% endfor %}{% endblock %}
=============================== All reactions ======================
{% block reactionNames %}{% for reaction in reactions %}#{{reaction.id}}
{% endfor %}{% endblock %}
=============================== All compounds========================
{% block compoundNames %}{% for compound in compounds %}#{{compound.id}}
{% endfor %}{% endblock %}
=============================== Stoichiometric Matrix  ============
{% block sm %}{% for line in matrix %}{{ line[0] }} {{ line[1] }} {{ line[2] }}
{% endfor %}{% endblock %}
=============================== Comments =========================
{% block comments %}
//! Annotation of model variables

//! Literature cited

//! Description of experimental data presented in .DAT files
{% endblock %}
=============================== IV ================================
{% block iv %}
//! Data comments
// nothing

//! Compartments volumes, count: {{ numbers|rejectattr("compound")|selectattr("isCompartment")|length }}{% for number in numbers|rejectattr("compound")|selectattr("isCompartment") %}
{{ number.id }} = {{ number.rhs }};{% if number.units %} // units: {{ number.units }}{% endif %}{% if number.title %} // {{ number.title }}{% endif %}{% else %}// nothing here{% endfor %}

//! Initial concentration, count: {{ numbers|selectattr("compound")|length }}{% for number in numbers | selectattr("compound") %}
{{ number.id }} = {{ number.rhs }};{% if number.units %} // units: {{ number.units }}{% endif %}{% if number.title %} // {{ number.title }}{% endif %}{% else %}// nothing here{% endfor %}

//! Kinetic parameters, count: {{ numbers|rejectattr("compound")|rejectattr("isCompartment")|length }}{% for number in numbers|rejectattr("compound")|rejectattr("isCompartment") %}
{{ number.id }} = {{ number.rhs }};{% if number.units %} // units: {{ number.units }}{% endif %}{% if number.title %} // {{ number.title }}{% endif %}{% else %}// nothing here{% endfor %}
{% endblock %}
=============================== RHS ================================
{% block rhs %}
//! Pools
// Pools are never generated by qs3p

//! Volume of compartments

//! Compound administration

//! Rate laws, count: {{ reactions.length }}({{rules.length}}){% for rule in rules %}{% if rule.isReaction %}
//!! {{ rule.id }}{% endif %}
{{ rule.id }} = {{ rule.rhs }};{% if rule.units %} // units: {{ rule.units }}{% endif %}{% if rule.title %} // {{ rule.title }}{% endif %}{% else %}// nothing{% endfor %}

//! Differential equations, count: {{ numbers|selectattr("compound")|length}}{% for dynamic in numbers|selectattr("compound")|sort(attribute='compound') %}
//!! {{ dynamic.id }}{% if dynamic.isAmount %}
F[{{ dynamic.compound }}] = {{ dynamic.diffLine }};{% if dynamic.title %} // {{ dynamic.title }}{% endif %} // isAmount: true{% else %}
F[{{ dynamic.compound }}] = ({{ dynamic.diffLine }})/{{ dynamic.compartment }};{% if dynamic.title %} // {{ dynamic.title }}{% endif %} // isAmount: false{% endif %}{% else %}// nothing{% endfor %}
//! Explicit Functions
// nothing
{% endblock %}
