{% extends "slv-export/template.slv.njk" %}
=========================== if/else in RHS ======================
{% block ifelseStatics %}{% for set in ifelseStatics %}
if({{ set.condition  }}){ {% for rule in set.ifPart %}
  {{ rule.id }} = {{ rule.rhs }};{% endfor %}
}else{}
{% endfor %}{% endblock %}
============================ output ======================
{% block outputVars %}{% for out in _model_.population.selectByClassName('Species') %}{{ out.id }}  {% endfor %}t  {% endblock %}
================================ Events ============================
{% block events %}{{ _model_.events.length }}{% for event in _model_.events %}
{{ event.target }}
{{ event.multiply }}
{{ event.add }}
{{ event.start }}
{{ event.period }}
{{ event.on }}{% endfor %}{% endblock %}
=============================== All reactions ======================
{% block reactionNames %}{% for reaction in _model_.processes %}#{{reaction.id}}
{% endfor %}{% endblock %}
=============================== All compounds========================
{% block compoundNames %}{% for compound in _model_.variables %}#{{compound.id}}
{% endfor %}{% endblock %}
=============================== Stoichiometric Matrix  ============
{% block sm %}{% for line in _model_.matrix %}{{ line[0]+1 }} {{ line[1]+1 }} {{ line[2] }}
{% endfor %}{% endblock %}
=============================== Comments =========================
{% block comments %}
//! Annotation of model variables

//! Literature cited

//! Description of experimental data presented in .DAT files
{% endblock %}
=============================== IV ================================
{% block iv %}
{% set constants = _model_.population.selectByClassName("Const") %}
//! Constants, count: {{ constants|length }}
{%- for con in constants %}
{{ con.id }} = {{ con.num }}; // @{{ con.className }} {{ "'"+con.title+"'" if con.title }} {units: {{ con.units|default('?') }}};
{%- else -%}// nothing here
{% endfor %}
{% set ivElements = _model_.population|exclude2("assignments.start_.num", undefined) %}
//! Initialization at start, count: {{ ivElements|length }}
{%- for number in ivElements %}
{{ number.id }} = {{ number.assignments.start_.num }}; // @{{ number.className }} {{ "'"+number.title+"'" if number.title }} {units: {{ number.units|default('?') }}}
{%- else -%}// nothing here
{% endfor %}
{% endblock %}
=============================== RHS ================================
{% macro diff(backReferences=[]) -%}
{% for br in backReferences|exclude2('stoichiometry', undefined) %}{% if br.stoichiometry>0 and not loop.first %}+{% endif %}{{ br.stoichiometry + '*'}}{{ br.process }}{% endfor %}
{%- endmacro %}
{% block rhs %}
//! Pools
// Pools are never generated by qs3p
{% set rhsElements = _model_.rhs %}
//! Initialization at ode, count: {{ rhsElements|length }}
{% for rule in rhsElements %}
{{ rule.id }} = {{ rule.assignments.ode_.expr }}; // @{{ rule.className }} {{ "'"+rule.title+"'" if rule.title }} {units: {{ rule.units|default('?') }}}
{% else %}// nothing here
{% endfor %}
//! Differential equations, count: {{ _model_.variables|length}}
{% for dynamic in _model_.variables %}
//!! {{ dynamic.id }}  @{{ dynamic.className }} {{ "'"+dynamic.title+"'" if dynamic.title }} {units: {{ dynamic.units|default('?') }}}
{% if dynamic.implicitBoundary %}
F[{{ loop.index }}] = {{ dynamic.id }}_rate_;
{% elif dynamic.className!=='Species' or dynamic.isAmount%}
F[{{ loop.index }}] = {{ diff(dynamic.backReferences) }};
{% else %}
F[{{ loop.index }}] = ( {{ diff(dynamic.backReferences) }} ) / {{ dynamic.compartment|default('default_compartment_') }};
{% endif %}
{% endfor %}
{% endblock %}
