{
  "$id": "https://hetalang.github.io/",
   "definitions": {

     "ID": {
       "description": "First character is letter, others are letter, digit or lodash.",
       "type": "string",
       "minLength": 1,
       "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$",
       "example": "x_12_"
     },

     "UnitsExpr": {
       "description": "Unit expression, see qsp-units project.",
       "type": "string",
       "pattern": "^[_a-zA-Z0-9./*^ ()+-]+$",
       "example": "1/h * ms"
     },

     "ProcessExpr": {
       "type": "string",
       "pattern": "^((\\d*\\s*\\*?\\s*\\w+)\\s*\\+?\\s*)*([=-]|[=-]>|<[=-]>|<>|>)((\\d*\\s*\\*?\\s*\\w+)\\s*\\+?\\s*)*$",
       "example": "2*S -> 3P1+P2",
       "errorMessage": {
         "pattern": "should be in format: \"2*S -> 3P1+P2\""
       }
     },

    "ExprString": {
      "description": "Expression as string. Currently pattern does not analyze expressions.",
      "type": "string",
      "minLength": 1,
      "pattern": "[a-zA-Z0-9. -+/*^()]*$"
    },

    "AssignmentDict": {
      "description": "Stores initializations as key/value dictionary. Key is switcher when to use. Key is one of Switcher id.",
      "type": "object",
      "propertyNames": { "$ref": "#/definitions/ID" },
      "additionalProperties": {
        "oneOf": [
          { "$ref": "#/definitions/ExprString" },
          { "type": "number"}
        ]
      },
      "example": {
        "start_": { "expr": 1.2 },
        "ode_": { "expr": "x * y" },
        "evt1": { "expr": "z + 1.2" }
      }
    },

    "Effector": {
      "description": "Abstract class for modifiers and actors",
      "type": "object",
      "required": ["target"],
      "properties": {
        "target": { "$ref": "#/definitions/ID" }
      }
    },

    "Actor": {
      "allOf": [
        { "$ref": "#/definitions/Effector" },
        {
          "properties": {
            "stoichiometry": { "type": "number" }
          }
        }
      ],
      "example": { "target": "x1", "stoichiometry": -1 }
    },

    "Statistics": {
      "description": "Describes different outputs for monte-carlo problem.",
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": { "type": "string", "enum": ["quantile", "mean", "correlation", "raw"] }
      }
    },

    "Component": {
      "type": "object",
      "description": "Abstract class for all top elements.",
      "properties": {
        "class": { "type": "string" },
        "id": { "$ref": "#/definitions/ID" },
        "title": { "type": "string" },
        "notes": { "type": "string" },
        "tags": { "type": "array", "items": { "type": "string" } },
        "aux": { "type": "object" }
      }
    },

    "_Scoped": {
      "description": "Abstract class for Records and other classes with space.",
      "properties": {
        "space": { "$ref": "#/definitions/ID" }
      }
    },

    "Record": {
      "type": "object",
      "properties": {
        "assignments": {
          "$ref": "#/definitions/AssignmentDict"
        },
        "boundary": {
          "type": "boolean", "default": false,
          "description": "If it is true the record cannot be changed by any process, only by expression in assignments."
        },
        "output": {
          "type": "boolean",
          "description": "Should be the record listed as an output"
        }
      }
    },



    "Compartment": {
      "type": "object"
    },


    "Species": {
      "type": "object",
      "properties": {
        "compartment": {
          "$ref": "#/definitions/ID"
        },
        "isAmount": {
          "description": "If it is false then the value represents the concentration, i.e. normalized to compartment.",
          "type": "boolean",
          "default": false
        }
      }
    },



    "Process": {
      "type": "object",
      "properties": {
        "assignments": {
          "required": ["ode_"]
        },
        "actors": {
          "oneOf": [
            { "type": "array", "items": {"$ref": "#/definitions/Actor"}, "errorMessage":  {"type": "should be an array of actors."}},
            { "$ref": "#/definitions/ProcessExpr" }
          ]
        }
      },
      "errorMessage": {
        "properties": {
          "actors": "is not string or array."
        }
      }
    },



    "Reaction": {
      "type": "object",
      "properties": {
        "reversible": { "type": "boolean", "default": true },
        "modifiers": {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/Effector" },
              { "$ref": "#/definitions/ID" }
            ]
          }
        },
        "isAmount": { "type": "boolean" },
        "compartment": {
          "$ref": "#/definitions/ID"
        }
      },
      "errorMessage": {
        "properties": {
          "modifiers":  "is not an array of ids or modifiers."
        }
      }
    },



    "_Switcher": {
      "type": "object",
      "properties": {
        "atStart": {
          "description": "If true than the condition will be checked at start_",
          "type": "boolean",
          "default": false
        },
        "active": {
          "description": "if false the event will not run.",
          "type": "boolean",
          "default": true
        }
      }
    },

    "CSwitcher": {
      "type": "object",
      "properties": {
        "trigger": { "$ref": "#/definitions/ExprString" }
      }
    },



    "DSwitcher": {
      "type": "object",
      "properties": {
        "trigger": {
          "oneOf": [
            { "$ref": "#/definitions/ExprString" },
            { "type": "boolean" }
          ]
        }
      }
    },

    "StopSwitcher": {
      "type": "object",
      "properties": {
        "trigger": {
          "oneOf": [
            { "$ref": "#/definitions/ExprString" },
            { "type": "boolean" }
          ]
        }
      }
    },

    "TimeSwitcher": {
      "type": "object",
      "properties": {
        "start": { "$ref" : "#/definitions/ConstInternal" },
        "stop": { "$ref" : "#/definitions/ConstInternal" },
        "period": { "$ref" : "#/definitions/ConstInternal" }
      }
    },



    "Const": {
      "type": "object",
      "description": "Input value. Upper and lower describes possible values. Scale describes transformation for fitting.",
      "properties": {
        "free": { "type": "boolean" },
        "num": { "type": "number" },
        "scale": { "type": "string", "enum": ["direct", "log", "logit"], "default": "direct" },
        "upper": { "type": "number" },
        "lower": { "type": "number" }
      }
     },

     "TimeScale": {
      "type": "object",
      "description": "t and other time scales",
      "properties": {
        "slope": { "type": "number", "exclusiveMinimum": 0 },
        "intercept": { "type": "number" },
        "output": { "type": "boolean" }
      }
     },

     "UnitComponent": {
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": { "$ref": "#/definitions/ID" },
        "multiplier": { "type": "number", "exclusiveMinimum": 0 },
        "exponent": { "type": "number" }
      },
      "example": { "kind": "mole", "multiplier": 1e-6, "exponent": 1 }
    },

     "_Size": {
       "type": "object",
       "properties": {
         "units": { "anyOf": [
            { "type": "number", "enum": [1] },
            { "$ref": "#/definitions/UnitsExpr" },
            { "type": "array", "items": { "$ref": "#/definitions/UnitComponent" } }
         ] }
       }
      },

     "ConstInternal": {
      "anyOf": [
        { "allOf": [ { "$ref": "#/definitions/Const" }, { "required": ["num"] } ] },
        { "$ref": "#/definitions/ID" },
        { "type": "number" }
      ]
     },



    "_Task": {
      "type": "object"
    },

    "MonteCarloTask": {
      "type": "object",
      "properties": {
        "statistics": {
          "type": "array",
          "items": { "$ref": "#/definitions/Statistics" }
        }
      }
    },



    "Page": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },



    "UnitDef": {
      "type": "object",
      "properties": {
      }
    },



    "FunctionDefinition": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": { "$ref": "#/definitions/ID" }
        },
        "expr": { "$ref": "#/definitions/ExprString" }
      }
    },



    "ReferenceDefinition": {
      "type": "object",
      "properties": {
        "prefix": { "type": "string" },
        "suffix": { "type": "string" }
      }
    }
  }
}
