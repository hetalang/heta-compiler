{
  "$id": "https://hetalang.github.io/",
   "definitions": {

     "ID": {
       "description": "First character is letter, others are letter, digit or lodash.",
       "type": "string",
       "minLength": 1,
       "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$",
       "example": "x_12_"
     },

     "UnitsExpr": {
       "description": "Unit expression, see qsp-units project.",
       "type": "string",
       "minLength": 1,
       "pattern": "^[a-zA-Z1/][_a-zA-Z0-9/*^ ]*$",
       "example": "1/h * ms"
     },

     "ProcessExpr": {
       "type": "string",
       "pattern": "^((\\d*\\s*\\*?\\s*\\w+)\\s*\\+?\\s*)*<?[=-]>?((\\d*\\s*\\*?\\s*\\w+)\\s*\\+?\\s*)*$",
       "example": "2*S -> 3P1+P2",
       "errorMessage": {
         "pattern": "should be in format: \"2*S -> 3P1+P2\""
       }
     },

    "ExprString": {
      "description": "Expression as string. Currently pattern does not analyze expressions.",
      "type": "string",
      "minLength": 1,
      "pattern": "[a-zA-Z0-9. -+/*^()]*$"
    },

    "Expression": {
      "type": "object",
      "required": ["expr"],
      "properties": {
        "expr": {
          "oneOf": [
            { "$ref": "#/definitions/ExprString" },
            { "type": "number"}
          ]
        }
      }
    },

    "AssignmentDict": {
      "description": "Stores initializations as key/value dictionary. Key is switcher when to use. Key is one of Switcher id.",
      "type": "object",
      "propertyNames": { "$ref": "#/definitions/ID" },
      "additionalProperties": {
        "oneOf": [
          { "$ref": "#/definitions/ExprString" },
          { "type": "number"},
          { "$ref": "#/definitions/Expression" }
        ]
      },
      "example": {
        "start_": { "expr": 1.2 },
        "ode_": { "expr": "x * y" },
        "evt1": { "expr": "z + 1.2" }
      }
    },

    "Effector": {
      "description": "Abstract class for modifiers and actors",
      "type": "object",
      "required": ["target"],
      "properties": {
        "target": { "$ref": "#/definitions/ID" }
      }
    },

    "Actor": {
      "allOf": [
        { "$ref": "#/definitions/Effector" },
        {
          "properties": {
            "stoichiometry": { "type": "number" }
          }
        }
      ],
      "example": { "target": "x1", "stoichiometry": -1 }
    },

    "Statistics": {
      "description": "Describes different outputs for monte-carlo problem.",
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": { "type": "string", "enum": ["quantile", "mean", "correlation", "raw"] }
      }
    },

    "_ComponentP": {
      "type": "object",
      "description": "Abstract class for all top elements.",
      "properties": {
        "class": { "type": "string" },
        "id": { "$ref": "#/definitions/ID" },
        "title": { "type": "string" },
        "notes": { "type": "string" },
        "tags": { "type": "array", "items": { "type": "string" } },
        "aux": { "type": "object" }
      }
    },

    "_ScopedP": {
      "description": "Abstract class for Records and other classes with space.",
      "properties": {
        "space": { "$ref": "#/definitions/ID" }
      }
    },

    "RecordP": {
      "type": "object",
      "properties": {
        "assignments": {
          "$ref": "#/definitions/AssignmentDict"
        },
        "boundary": {
          "type": "boolean", "default": false,
          "description": "If it is true the record cannot be changed by any process, only byexpression in assignments."
        }
      }
    },

    "Record": {
      "description": "Class describing numerical value which can be changed in time.",
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/RecordP" },
        {
          "required": ["id", "space"],
          "properties": { "class": { "const": "Record" } }
        }
      ]
    },

    "CompartmentP": {
      "type": "object"
    },

    "Compartment": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/RecordP" },
        { "$ref": "#/definitions/CompartmentP" },
        {
          "required": ["id", "space"],
          "properties": { "class": { "const": "Compartment" } }
        }
      ]
    },

    "SpeciesP": {
      "type": "object",
      "properties": {
        "compartment": {
          "$ref": "#/definitions/ID"
        },
        "isAmount": {
          "description": "If it is false then the value represents the concentration, i.e. normalized to compartment.",
          "type": "boolean", "default": false
        }
      }
    },

    "Species": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/RecordP" },
        { "$ref": "#/definitions/SpeciesP" },
        {
          "required": ["id", "space", "compartement"],
          "properties": { "class": { "const": "Species" } }
        }
      ]
    },

    "ProcessP": {
      "type": "object",
      "properties": {
        "assignments": {
          "required": ["ode_"]
        },
        "actors": {
          "oneOf": [
            { "type": "array", "items": {"$ref": "#/definitions/Actor"}, "errorMessage":  {"type": "should be an array of actors."}},
            { "$ref": "#/definitions/ProcessExpr" }
          ]
        }
      },
      "errorMessage": {
        "properties": {
          "actors": "is not string or array."
        }
      }
    },

    "Process": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/RecordP" },
        { "$ref": "#/definitions/ProcessP" },
        {
          "required": ["id", "space", "actors"],
          "properties": { "class": { "const": "Process" } }
        }
      ]
    },

    "ReactionP": {
      "type": "object",
      "properties": {
        "modifiers": {
          "type": "array",
          "items": {
            "oneOf": [
              { "$ref": "#/definitions/Effector" },
              { "$ref": "#/definitions/ID" }
            ]
          }
        },
        "isAmount": { "type": "boolean" },
        "compartment": {
          "$ref": "#/definitions/ID"
        }
      },
      "errorMessage": {
        "properties": {
          "modifiers":  "is not an array of ids or modifiers."
        }
      }
    },

    "Reaction": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/RecordP" },
        { "$ref": "#/definitions/ProcessP" },
        { "$ref": "#/definitions/ReactionP" },
        {
          "required": ["id", "space", "actors", "modifiers"],
          "properties": { "class": { "const": "Reaction" } }
        }
      ]
    },

    "_SwitcherP": {
      "type": "object"
    },

    "CondSwitcherP": {
      "type": "object",
      "properties": {
        "condition": { "$ref": "#/definitions/ID" }
      }
    },

    "CondSwitcher": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/_SwitcherP" },
        { "$ref": "#/definitions/CondSwitcherP" },
        {
          "required": ["id", "space", "condition"],
          "properties": { "class": { "const": "CondSwitcher" } }
        }
      ]
    },

    "TimeSwitcherP": {
      "type": "object",
      "properties": {
        "start": { "$ref" : "#/definitions/ConstInternal" },
        "stop": { "$ref" : "#/definitions/ConstInternal" },
        "period": { "$ref" : "#/definitions/ConstInternal" },
        "repeatCount": { "$ref" : "#/definitions/ConstInternal" }
      }
    },

    "TimeSwitcher": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/_SwitcherP" },
        { "$ref": "#/definitions/TimeSwitcherP" },
        {
          "required": ["id", "space", "start"],
          "properties": { "class": { "const": "TimeSwitcher" } }
        }
      ]
    },

    "_ExportP": {
      "type": "object",
      "properties": {
        "filepath": { "type": "string" },
        "powTransform": { "type": "string", "enum": ["keep", "function", "operator"] },
        "omitRows": { "type": "number" },
        "splitByClass": { "type": "boolean" }
      }
    },

    "_Export": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ExportP" },
        {
          "required": ["id"],
          "properties": { "class": { "type": "string", "pattern": "[A-Z].*Export"} }
        }
      ]
    },

    "ConstP": {
      "type": "object",
      "properties": {
        "free": { "type": "boolean" },
        "num": { "type": "number" }
      }
     },

     "UnitComponent": {
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": { "$ref": "#/definitions/ID" },
        "multiplier": { "type": "number", "exclusiveMinimum": 0 },
        "exponent": { "type": "number" }
      },
      "example": { "kind": "mole", "multiplier": 1e-6, "exponent": 1 }
    },

     "_SizeP": {
       "type": "object",
       "properties": {
         "units": { "anyOf": [
            { "$ref": "#/definitions/UnitsExpr" },
            { "type": "array", "items": { "$ref": "#/definitions/UnitComponent" } }
         ] }
       }
      },

     "ConstInternal": {
      "anyOf": [
        { "allOf": [ { "$ref": "#/definitions/ConstP" }, { "required": ["num"] } ] },
        { "$ref": "#/definitions/ID" },
        { "type": "number" }
      ]
     },

    "Const": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/ConstP" },
        {
          "required": ["id", "num"],
          "properties": { "class": { "const": "Const" } }
        }
      ]
    },

    "_TaskP": {
      "type": "object"
    },

    "MonteCarloTaskP": {
      "type": "object",
      "properties": {
        "statistics": {
          "type": "array",
          "items": { "$ref": "#/definitions/Statistics" }
        }
      }
    },

    "MonteCarloTask": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_ScopedP" },
        { "$ref": "#/definitions/_TaskP" },
        { "$ref": "#/definitions/MonteCarloTaskP" },
        {
          "required": ["id", "space", "statistics"],
          "properties": { "class": { "const": "MonteCarloTask" } }
        }
      ]
    },

    "PageP": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },

    "Page": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/PageP" },
        {
          "required": ["id", "content"],
          "properties": { "class": { "const": "Page" } }
        }
      ]
    },

    "UnitDefP": {
      "type": "object",
      "properties": {
      }
    },

    "UnitDef": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/_SizeP" },
        { "$ref": "#/definitions/UnitDefP" },
        {
          "required": ["id"],
          "properties": { "class": { "const": "UnitDef" } }
        }
      ]
    },

    "FunctionDefinitionP": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": { "$ref": "#/definitions/ID" }
        },
        "expr": { "$ref": "#/definitions/ExprString" }
      }
    },

    "FunctionDefinition": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/FunctionDefinitionP" },
        {
          "required": ["id", "args", "expr"],
          "properties": { "class": { "const": "FunctionDefinition" } }
        }
      ]
    },

    "ReferenceDefinitionP": {
      "type": "object",
      "properties": {
        "prefix": { "type": "string" },
        "suffix": { "type": "string" }
      }
    },

    "ReferenceDefinition": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/ReferenceDefinitionP" },
        {
          "required": ["id"],
          "properties": { "class": { "const": "ReferenceDefinition" } }
        }
      ]
    },

    "SimpleTaskP": {
      "type": "object",
      "properties": {
        "type": { "type": "string", "enum": ["simulation"], "default": "simulation" },
        "subtasks": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "saveat": {"type": "array", "items": {}, "example": [1,2,3] },
              "output": {"type": "array", "items": { "$ref": "#/definitions/ID" } }
            },
            "required": ["saveat", "output"]
          }
        },
        "tspan": {
          "type": "array",
          "items": [
            {},
            {}
          ],
          "additionalItems": false
        },
        "reassign": {
          "type": "object",
          "items": {
            "type": "object",
            "propertyNames": { "$ref": "#/definitions/ID" },
            "additionalProperties": { "type": "number" }
          }
        },
        "solver": {
          "type": "object",
          "properties": {
            "alg": { "type": "string" },
            "reltol": { "type": "number", "minimum": 0 },
            "abstol": { "type": "number", "minimum": 0 },
            "maxiters": { "type": "number", "minimum": 0 },
            "dt": { "type": "number", "minimum": 0 },
            "dtmin": { "type": "number", "minimum": 0 },
            "dtmax": { "type": "number", "minimum": 0 },
            "tstops": {
              "type": "array",
              "items": { "type": "number" }
            }
          }
        }
      }
    },

    "ObservationP": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["kinetics"] },
        "indepDataMarker": { "$ref": "#/definitions/ID" },
        "depDataMarkers": {
          "type": "array",
          "items": { "$ref": "#/definitions/ID" }
        },
        "indepData": {
          "type": "array",
          "items": { "type": "number" }
        },
        "depData": {
          "type": "array",
          "items": { "type": "array", "items": { "type": "number" } }
        }
      }
    },

    "Observation": {
      "allOf": [
        { "$ref": "#/definitions/_ComponentP" },
        { "$ref": "#/definitions/ObservationP" },
        {
          "required": ["id", "kind"],
          "properties": { "class": { "const": "Observation" } }
        }
      ]
    },

    "Insert": {
      "type": "object",
      "description": "Insert new element. Currently properties are not being checked.",
      "required": ["action", "class", "id"],
      "properties": {
        "action": { "const": "insert" },
        "class": { "type": "string", "pattern": "^[A-Z]" },
        "id": { "$ref": "#/definitions/ID" }
      }
    },

    "Update": {
      "type": "object",
      "description": "Update existed element. Currently properties are not being checked.",
      "required": ["action", "id"],
      "properties": {
        "action": { "const": "update" },
        "id": { "$ref": "#/definitions/ID" }
      }
    },

    "Upsert": {
      "anyOf": [
        { "$ref": "#/definitions/Update" },
        { "$ref": "#/definitions/Insert" }
      ]
    },

    "Delete": {
      "type": "object",
      "description": "Delete existed element. Currently properties are not being checked.",
      "required": ["action", "id"],
      "properties": {
        "action": { "const": "delete" },
        "id": { "$ref": "#/definitions/ID" }
      }
    }

   }
}
