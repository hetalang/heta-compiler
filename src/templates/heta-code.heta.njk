// This code was generated by Heta compiler, see https://hetalang.github.io
{#-
    this.exportStorage = new Map();
    this.unitDefStorage = [...];
    this.namespaceStorage = [...];
-#}
{%- macro dict(component={}) %}
  {{- ' {' }}
  {{- ' units: ' + component.units + ',' if component.units is defined }}
  {{- ' boundary: ' + component.boundary + ',' if component.boundary is defined }}
  {{- ' compartment: ' + component.compartment + ',' if component.compartment is defined }}
  {{- ' actors: ' + component.actors + ',' if component.actors.length > 0 }}
  {{- ' modifiers: ' + hetaArray(component.modifiers) + ',' if component.modifiers.length > 0 }}
  {{- ' reversible: ' + component.reversible + ',' if component.reversible === false }}
  {{- ' isAmount: ' + component.isAmount + ',' if component.isAmount is defined }}
  {{- ' output: ' + component.output + ',' if component.output is defined }}
  {{- ' slope: ' + component.slope + ',' if component.slope is defined and component.slope !== 1 }}
  {{- ' intercept: ' + component.intercept + ',' if component.intercept is defined and component.intercept !== 0 }}
  {{- ' trigger: ' + component.trigger + ',' if component.trigger is defined }}
  {{- ' start: ' + component.start + ',' if component.start is defined }}
  {{- ' period: ' + component.period + ',' if component.period is defined }}
  {{- ' stop: ' + component.stop + ',' if component.stop is defined }}
  {{- ' atStart: ' + component.atStart + ',' if component.atStart is defined }}
  {{- ' aux: ' + hetaObject(component.aux) + ',' if component.aux is defined and component.aux|length > 0}}
  {{- ' }' }}
{%- endmacro -%}
{%- macro notes(component={}) %}
  {{- '\n  \'\'\'' + component.notes + '\'\'\'' if component.notes is defined }}
{%- endmacro %}
{%- macro start_(component={}) %}
  {{- ' .= ' + component.assignments.start_ if component.assignments.start_ is defined -}}
{%- endmacro %}
{%- macro num(component={}) %}
  {{- ' = ' + component.num if component.num is defined -}}
{%- endmacro %}
{%- macro class(component={}) %}
  {{- ' @' + component.className }}
{%- endmacro %}
{%- macro title(component={}) %}
  {{- ' \'' + component.title + '\'' if component.title is defined }}
{%- endmacro %}
{%- macro hetaArray(array=[]) -%}
  [{{ array.join(', ') }}]
{%- endmacro %}
{%- macro hetaObject(object={}) -%}
  { {{- object|dump -}} }
{%- endmacro %}
{%- macro assignments(record) -%}
  {%- for key, value in record.assignments %}
  {%- if key ==='start_' %}
  {%- elseif key ==='ode_' %}
  {{ record.id }} := {{ value }};
  {%- else %}
  {{ record.id }} [{{ key }}]= {{ value }};
  {%- endif %}
  {%- endfor %}
{%- endmacro -%}

{%- for id, unitDef in unitDefStorage %}
{%-  if not unitDef.isCore %}
{{ id }} #defineUnit { units: {{ unitDef.units }}, };
{%- endif %}
{%- endfor %}

{%- for spaceId, namespace in namespaceStorage %}

{{ 'abstract ' if namespace.isAbstract }}namespace {{ spaceId }} begin

{%- for component in namespace.selectByClassName('TimeScale') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component) }}
  {{- ';' }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByClassName('Compartment') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component) }}
  {{- start_(component) }}
  {{- ';' }}
  {{- assignments(component) }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByClassName('Species') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component) }}
  {{- start_(component) }}
  {{- ';' }}
  {{- assignments(component) }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByInstanceOf('Process') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component.toQ({simplifyModifiers: true, simplifyActors: true})) }}
  {{- start_(component) }}
  {{- ';' }}
  {{- assignments(component) }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByClassName('Record') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component) }}
  {{- start_(component) }}
  {{- ';' }}
  {{- assignments(component) }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByClassName('Const') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component) }}
  {{- num(component) }}
  {{- ';' }}
  {{- '\n' if loop.last }}
{%- endfor %}

{%- for component in namespace.selectByInstanceOf('_Switcher') %}
  {{- notes(component) }}
  {{ component.id }}
  {{- class(component) }}
  {{- title(component) }}
  {{- dict(component.toQ()) }}
  {{- ';' }}
  {{- '\n' if loop.last }}
{%- endfor -%}
end
{%- endfor %}
