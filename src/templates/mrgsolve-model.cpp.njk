$PROB
# Model: `{{ population.spaceName }}`
  - Title: {{ population.spaceName }}
  - Notes: Generated automatically from platform with Heta compiler
  - Source: Heta compiler

# Demo
```{r,echo=TRUE}
  ev(amt=10) %>% mrgsim %>% plot
```

$SET end={{ method.timeRange[1]|default(120) }}, delta={{ method.dt|default(0.1) }}, hmax={{ method.dtmax|default(0.01) }}, hmin={{ method.dtmin|default(0) }}, rtol={{ method.reltol|default("1e-3") }}, atol={{ method.abstol|default("1e-6") }}

$PARAM @annotated
{%- for constant in population.selectByClassName("Const") %}
// @{{ constant.className }} {{ "'"+constant.title+"'" if constant.title is defined }}
{{ constant.id }} : {{ constant.num }} : {% if constant.units %}({{ constant.units }}){% endif %}
{%- endfor %}
{%- for evt in continuousEvents %}
// @{{ evt.switcher.className }} {{ "'"+evt.switcher.title+"'" if evt.switcher.title is defined }}
{{ evt.switcher.id }}_ : {{ '1.0' if evt.switcher.active==true else '0.0' }} : 
{%- endfor %}

$CMT @annotated
{%- for record in dynamicRecords %}
// @{{ record.className }} '{{ record.title }}'
{% if record.className=="Species" and not record.isAmount -%}
{{ record.id }}_amt_ : as amount
{%- else -%}
{{ record.id }} : amount
{%- endif %}
{%- endfor %}

$GLOBAL
{%- for variable in dynamicRecords|filter2("className", "Species")|exclude2("isAmount", true) %}
#define {{ variable.id }} ({{ variable.id }}_amt_ / {{ variable.compartment }})
{%- endfor %}

$PREAMBLE
{%- for record in initRecords %}
{{ "//" if record.isDynamic }}double {{ record.id }} = {{ record.assignments.start_.toCString() }}; 
{%- endfor %}

$MAIN
{%- for variable in initRecords | filter2("isDynamic", true) %}
{{  variable.id }}{{ "_amt_" if (variable.className==="Species" and not variable.isAmount) }}_0 = ({{ variable.assignments.start_.toCString() }}){% if variable.className==="Species" and not variable.isAmount %} * {{ variable.compartment }}{% endif %}; 
{%- endfor %}

{% if continuousEvents|length > 0 -%}
$TABLE
{%- for evt in continuousEvents %}
// {{ evt.switcher.id }} @{{ evt.switcher.className }}
if ({{ evt.switcher.id }}_==1.0 && {{ evt.switcher.trigger.toCString() }}>=0.0{{ ' && TIME>0.0' if not evt.switcher.atStart }}) {
  {%- for assign in evt.assignments %}
  {%- if assign.num >= 0 %} {# for synamic #}
  {%- set evtId = 'evt_' + assign.target + '_' %}
  mrg::evdata {{ evtId }}(TIME, 8);
  {{ evtId }}.amt = {{ assign.expr.toCString() }};
  {{ evtId }}.cmt = {{ assign.num + 1}};
  {{ evtId }}.now = true;
  self.mevector.push_back({{ evtId }});
  {%- else %} {# for static #}
  {{ assign.target }} = {{ assign.expr.toCString() }};
  {%- endif %}
  {%- endfor %}
}
{%- endfor %}
{%- endif %}

$ODE
{%- for ts in population.selectByClassName('TimeScale') | exclude2('id', 't') %}
// @{{ ts.className }} '{{ ts.title }}'
double {{ ts.id }} = {{ ts.slope }} * SOLVERTIME + {{ ts.intercept }};
{%- endfor %}
{%- for record in ruleRecords %}
// @{{ record.className }} '{{ record.title }}'
{{ "double " if not record.assignments.start_ }}{{ record.id }} = {{  record.assignments.ode_.toCString() }};
{%- endfor %}
{% for variable in dynamicRecords %}
dxdt_{{ variable.id }}{{ "_amt_" if variable.className==="Species" and not variable.isAmount }} =
{%- for item in variable.backReferences|exclude2('stoichiometry', undefined) %} {{ "+ " if not loop.first }}({{ item.stoichiometry }})*{{ item.process }}{% endfor %};
{%- endfor %}

$CAPTURE @annotated
{%- for record in output %}
{{ record.id }} : {{ record.title }} {% if record.units is defined %}({{ record.units }}){% endif %}
{%- endfor %}
