{% extends "template.slv.njk" %}
=========================== if/else in RHS ======================
{% block ifelseStatics %}{% for set in ifelseStatics %}
if({{ set.condition  }}){ {% for rule in set.ifPart %}
  {{ rule.id }} = {{ rule.rhs }};{% endfor %}
}else{}
{% endfor %}{% endblock %}
============================ output ======================
{% block outputVars %}{% for out in variables %}{{ out.id }}  {% endfor %}t  {% endblock %}
================================ Events ============================
{% block events %}{{ events.length }}{% for event in events %}
{{ event.target }}
{{ event.multiply }}
{{ event.add }}
{{ event.start }}
{{ event.period }}
{{ event.on }}{% endfor %}{% endblock %}
=============================== All reactions ======================
{% block reactionNames %}{% for reaction in processes %}#{{reaction.id}}
{% endfor %}{% endblock %}
=============================== All compounds ========================
{% block compoundNames %}{% for compound in variables %}#{{compound.id}}
{% endfor %}{% endblock %}
=============================== Stoichiometric Matrix  ============
{% block sm %}{% for line in matrix %}{{ line[0]+1 }} {{ line[1]+1 }} {{ line[2] }}
{% endfor %}{% endblock %}
=============================== Comments =========================
{% block comments %}
//! Annotation of model variables

//! Literature cited

//! Description of experimental data presented in .DAT files
{% endblock %}
=============================== IV ================================
{% block iv %}
{% set constants = population.selectByClassName("Const") %}
//! Constants, count: {{ constants|length }}
{%- for con in constants %}
{{ con.id }} = {{ con.num }}; // @{{ con.className }} {{ "'"+con.title+"'" if con.title }} {units: {{ con.units|default('?') }}};
{%- else -%}// nothing here
{% endfor %}
{% set ivElements = population.toArray()|exclude2("assignments.start_.num", undefined) %}
//! Initialization at start, count: {{ ivElements|length + 1}}
{%- for number in ivElements %}
{{ number.id }} = {{ number.assignments.start_.num }}; // @{{ number.className }} {{ "'"+number.title+"'" if number.title }} {units: {{ number.units|default('?') }}}
{%- else -%}// nothing here
{% endfor %}
default_compartment_ = 1; // {units: UL} This is fake compartment to support compounds without compartment.
{% set switchers = population.selectByClassName("TimeSwitcher")%}
{% if switchers|length > 0 %}
//! Switchers for time events, count {{ switchers|length }}
{% for switcher in switchers %}
{{ switcher.id }}_ = 1; // @TimeSwitcher {  }
{% endfor %}
{% endif %}
{% endblock %}
=============================== RHS ================================
{% macro diff(backReferences=[]) -%}
{% for br in backReferences|exclude2('stoichiometry', undefined) -%}
{% if br.stoichiometry>0 and not loop.first %}+{% endif %}{{ br.stoichiometry + '*'}}{{ br.process }}{{ '' if br._process_.isAmount!==false else '*' + br._process_.compartment }}
{%- endfor %}
{%- endmacro %}
{% block rhs %}
//! Pools
// Pools are never generated by Heta compiler
{% set rhsElements = rhs %}
//! Initialization at ode, count: {{ rhsElements|length }}
{% for rule in rhsElements %}
{{ rule.id }} = {{ rule.assignments.ode_.toSLVString(powTransform) }}; // @{{ rule.className }} {{ "'"+rule.title+"'" if rule.title }} {units: {{ rule.units|default('?') }}}
{% else %}// nothing here
{% endfor %}
//! Differential equations, count: {{ variables|length}}
{% for dynamic in variables %}
//!! {{ dynamic.id }}  @{{ dynamic.className }} {{ "'"+dynamic.title+"'" if dynamic.title }} {units: {{ dynamic.units|default('?') }}}
{% if dynamic.className!=='Species' or dynamic.isAmount%}
F[{{ loop.index }}] = {{ diff(dynamic.backReferences) }};
{% else %}
F[{{ loop.index }}] = ( {{ diff(dynamic.backReferences) }} ) / {{ dynamic.compartment|default('default_compartment_') }};
{% endif %}
{% endfor %}
{% endblock %}
