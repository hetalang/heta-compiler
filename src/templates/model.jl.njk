{#-
  constants : all constants
  initRecords : all records SORTED by start_ and have start_ or isRule
  dynamicRecords : records with isDynamic = true, i.e. no rules, no boundary, have reactions
  ruleRecords : all records SORTED by ode_
  staticRecords : records which is not dynamic nor rule
  events : array of {switcher, array of assignments with [switcher]}
  builderName
  options
  namespace
  notDynamicRecords
  rhs
  pTranslator
-#}

#= 
    This code was generated by {{ builderName }}
    {{ options.title + '.' if options.title}}{{ options.notes }}
=#

module SimSolverPlatform {# set here the name of platform in future #}
using SimSolver

{%- for img in nsImages %}
{% set id = img.namespace.spaceName %}
### create default constants
{{ id }}_constants_ = NamedTuple{(
  {% for con in img.constants | exclude2('num', undefined) -%}{# exclude const without num -#}
    :{{ con.id }},
  {%- endfor %}
)}(Float64[
  {% for con in img.constants | exclude2('num', undefined) -%}
    {{ con.num }},
  {%- endfor %}
])

### create default output
{{ id }}_output_ = (
  {% for rec in img.namespace.selectByInstanceOf('Record') -%}
  :{{ rec.id }},
  {%- endfor %}
)

### initialization of ODE variables and Records
function {{ id }}_start_(cons)
    #({% for con in img.constants -%}
    {{ con.id }}, 
    {%- endfor %}) = cons

    # Heta initialize
    t = 0.0 # initial time
    {% for record in img.initRecords -%}
    {% if record.isRule -%}
    {{ record.id }} = {{ record.getAssignment('ode_').translate(img.pTranslator).toJuliaString() }}
    {%- else -%}
    {{ record.id }} = {{ record.getAssignment('start_').translate(img.pTranslator).toJuliaString() }}
    {%- endif %}
    {% endfor %}
    # save results

    return (
        {%- if img.dynamicRecords | length > 0 %}
        Float64[
        {%- for record in img.dynamicRecords %}
        {%- if record.instanceOf('Species') and not record.isAmount and not record.isRule %}
            {{ record.id }} * {{ record.compartment }}, 
        {%- else %}
            {{ record.id }}, 
        {%- endif %}
        {%- endfor %}
        ],
        {% else %}
        [ 0.0 ], # init for fake variable
        {%- endif %}
        Float64[
        {%- for record in img.staticRecords %}
            {{ record.id }}, 
        {% endfor -%}
        ]
    )
end

### calculate RHS of ODE
function {{ id }}_ode_(du, u, p, t)
    cons = p.constants
    ({% for record in img.staticRecords -%}
    {{ record.id }}, 
    {%- endfor %}) = p.static
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}_, 
    {%- endfor %}) = u {# TODO: replace by u[index] #}

    # Heta rules
    {% for record in img.ruleRecords %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translate(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and record.isDynamic and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% elif record.isDynamic -%}
    {{ record.id }} = {{ record.id }}_
    {% endif -%}
    {% endfor %}
    #p.static .= [{% for record in img.staticRecords -%}
    {{ record.id }}, 
    {%- endfor %}]
    {%- if img.dynamicRecords | length > 0 %}
    du .= [{% for record in img.dynamicRecords %}
      {{ img.rhs[loop.index0] }},  # d{{ record.id }}_/dt
    {%- endfor %}
    ]
    {%- else %}
    du .= [ 1.0 ] # RHS for fake variable
    {%- endif %}
end

### output function
function {{ id }}_make_saving_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        ({% for record in img.staticRecords -%}
        {{ record.id }}, 
        {%- endfor %}) = integrator.p.static
        ({% for record in img.dynamicRecords -%}
        {{ record.id }}_, 
        {%- endfor %}) = u{# TODO: replace by u[index] #}

        # Heta rules
        {% for record in img.ruleRecords %}
        {%- if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translate(img.pTranslator).toJuliaString() }}
        {% elif record.instanceOf('Species') and record.isDynamic and not record.isAmount -%}
        {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
        {% elif record.isDynamic -%}
        {{ record.id }} = {{ record.id }}_
        {% endif -%}
        {% endfor %}
        # calculate amounts
        {%- for record in img.notDynamicRecords %}
        {%- if record.instanceOf('Species') and not record.isAmount %}
        {{ record.id }}_ = {{ record.id }} * {{ record.compartment }}
        {%- else %}
        {{ record.id }}_ = {{ record.id }}
        {%- endif %}
        {%- endfor %}

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### time events
{%- for event in img.events | filter2('switcher.className', 'TimeSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_times_(cons, times = [0.0, 100.0])
    {%- set ev_start = img.pTranslator.symbolName[event.switcher.start] if event.switcher.start is defined else event.switcher.startObj.numFloat %}
    {%- set ev_period = img.pTranslator.symbolName[event.switcher.period] if event.switcher.period is defined else event.switcher.periodObj.numFloat %}
    {%- set ev_stop = img.pTranslator.symbolName[event.switcher.stop] if event.switcher.stop is defined else event.switcher.stopObj.numFloat %}
    {% if ev_period is undefined -%}
    return [{{ ev_start }}]
    {%- else -%}
    return {{ ev_period }} > 0.0 ? collect(range({{ ev_start }}, {{ ev_stop if ev_stop is defined else 'times[2]' }}; step={{ ev_period }})) : [{{ ev_start }}]
    {%- endif %}
end
{%- endfor %}

### discrete events
{%- for event in img.events | filter2('switcher.className', 'DSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_trigger_(u, t, integrator)
    cons = integrator.p.constants
    ({% for record in img.staticRecords -%}
    {{ record.id }}, 
    {%- endfor %}) = integrator.p.static
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}_, 
    {%- endfor %}) = u

    # Heta rules
    {% for record in img.ruleRecords %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translate(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and record.isDynamic and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% elif record.isDynamic -%}
    {{ record.id }} = {{ record.id }}_
    {% endif -%}
    {% endfor %}

    return {{ event.switcher.trigger.translate(img.pTranslator).toJuliaString() if event.switcher.trigger is defined else 'false' }} ? 1 : -1
end
{%- endfor %}

### continous events
{%- for event in img.events | filter2('switcher.className', 'CSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_condition_(u, t, integrator)
    cons = integrator.p.constants
    ({% for record in img.staticRecords -%}
    {{ record.id }}, 
    {%- endfor %}) = integrator.p.static
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}_, 
    {%- endfor %}) = u

    # Heta rules
    {% for record in img.ruleRecords %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translate(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and record.isDynamic and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% elif record.isDynamic -%}
    {{ record.id }} = {{ record.id }}_
    {% endif -%}
    {% endfor %}

    return {{ event.switcher.trigger.translate(img.pTranslator).toJuliaString() if event.switcher.trigger is defined else '-1' }}
end
{%- endfor %}

### event assignments
{% for event in img.events -%}
function {{ id }}_{{ event.switcher.id }}_assignment_(integrator)
    cons = integrator.p.constants
    t = integrator.t
    ({% for record in img.staticRecords -%}
    {{ record.id }}, 
    {%- endfor %}) = integrator.p.static
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}_, 
    {%- endfor %}) = integrator.u

    # Heta rules
    {% for record in img.ruleRecords %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translate(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and record.isDynamic and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% elif record.isDynamic -%}
    {{ record.id }} = {{ record.id }}_
    {% endif -%}
    {% endfor %}
    # recalculated values
    ({%- for assignment in event.affect -%}
    {{ assignment.id }}, 
    {%- endfor %}) = ({%- for assignment in event.affect -%}
    {{ assignment.getAssignment(event.switcher.id).translate(img.pTranslator).toJuliaString() }}, 
    {%- endfor %})
    
    # save results

    integrator.u .= [
    {{ '0.0' if img.dynamicRecords | length == 0 }}
    {%- for record in img.dynamicRecords %}
        {% if record.instanceOf('Species') and not record.isAmount and not record.isRule -%}
        {{ record.id }} * {{ record.compartment }}, 
        {%- else -%}
        {{ record.id }}, 
        {%- endif %}
    {%- endfor %}
    ]
    
    integrator.p.static .= [
        {%- for record in img.staticRecords %}
        {{ record.id }}, 
        {%- endfor %}
    ]
end
{% endfor %}

### model

{{ id }}_model_ = Model(
  {{ id }}_start_,
  {{ id }}_ode_,
  [
      {%- for event in img.events %}
      {% if event.switcher.instanceOf('TimeSwitcher') -%}
      TimeEvent({{ id }}_{{ event.switcher.id }}_times_, {{ id }}_{{event.switcher.id}}_assignment_),
      {%- elif event.switcher.instanceOf('DSwitcher') -%}
      DEvent({{ id }}_{{ event.switcher.id }}_trigger_, {{ id }}_{{event.switcher.id}}_assignment_),
      {%- elif event.switcher.instanceOf('CSwitcher') -%}
      CEvent({{ id }}_{{ event.switcher.id }}_condition_, {{ id }}_{{event.switcher.id}}_assignment_),
      {%- endif %}
      {%- endfor %}
  ],
  {{ id }}_make_saving_,
  {{ id }}_constants_,
  #{{ id }}_output_
)

### default task

{{ id }}_default_ = SimpleSTask(
    {{ id }}_model_,    # model
    NamedTuple(),       # constants
    SubTask(            # subtasks
        collect(range(0., step=5.0, stop=100.)), # 
        Symbol[
        {%- for rec in img.namespace.selectByInstanceOf('Record') -%}
        :{{ rec.id }},
        {%- endfor -%}
        ]                             # output ids
    ),
    (0.0, 100.0),       # tspan
    solver = Dict(               # solver
        :alg => :Tsit5,
        :reltol => 1e-3,
        :abstol => 1e-6
    ),
    evt_save = (true, true)
)
{%- endfor %}{# img #}

### OUTPUT

models = (
    {%- for img in nsImages %}
    {{ img.namespace.spaceName }} = {{ img.namespace.spaceName }}_model_,
    {%- endfor %}
)
tasks = (
    {%- for img in nsImages %}
    {{ img.namespace.spaceName }}_default = {{ img.namespace.spaceName }}_default_,
    {%- endfor %}
)

export models, tasks

end
