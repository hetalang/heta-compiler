{% macro idOrSynonim(component) %}{# if no Synonim in yTranslator, than use id #}
{%- if yTranslator[component.id] -%}
{{ yTranslator[component.id] }}
{%- else -%}
{{ component.id }}
{%- endif -%}
{% endmacro -%}
{%- set timeScales = namespace.selectByClassName('TimeScale') | exclude2('id', 't') -%}
{#-
  constants : all constants
  initRecords : all records SORTED by start_ and have start_ or isRule
-#}

%%%% This code was generated by {{ builderName }}
% {{ options.title + '.' if options.title }}{{ options.notes }}

function [ode_func, out_func, y0_, events_conditions, events_affects] = {{ namespace.spaceName }}_model(p)

    %%% auxilary
    % ternary operator
    function out = tern__(cond, x, y)
        if cond
            out = x;
        else
            out = y;
        end
    end

    {%- for functionDefinition in functionDefArray %}
    function out = {{ functionDefinition.id }}({{ functionDefinition.arguments.join(', ') }})
        out = {{ functionDefinition.math.toMatlabString(false) }}
    end
    {%- endfor %}

    ode_func = @ODEFunc;
    out_func = @OutputFunc;
    events_conditions = @Conditions;

    vec = p({{ constants|length + 1 }}:{{ constants|length + events|length }}) ~= 0;
    events_affects_full = {
    {%- for event in events -%}
        @{{ event.switcher.id }}_affect{{ ', ' if not loop.last }}
    {%- endfor -%}
    };
    % reduce to number of active events
    events_affects = events_affects_full(vec);
    y0_ = InitFunc();

    % shared variable
    shared_values = zeros(1, {{ sharedRecords|length }});
    integrator = [];

    %%% Initialization of dynamic records
    function y__ = InitFunc()
        integrator = []; % reset integrator
        time = 0; % zero time
        {%- for ts in timeScales %}
        {{ts.id}} = {{ ts.slope }} * time {# XXX #} + {{ ts.intercept }};
        {%- endfor %}
        {% for record in initRecords %}
        {% if record.getAssignment('start_') is defined -%}
        {{ record.id }} = {{ record.getAssignment('start_').translateSymbol(pTranslator).toMatlabString(false) }}; % {{ record.id }}, {{ record.title }} ({{ record.units }})
        {%- else -%}
        {{ record.id }} = {{ record.getAssignment('ode_').translateSymbol(pTranslator).toMatlabString(false) }}; % {{ record.id }}, {{ record.title }} ({{ record.units }})
        {%- endif -%}
        {%- endfor %}

        % before reinitialization
        y0__ = [{% for record in dynamicRecords %}
        {%- if record.instanceOf('Species') and not record.isAmount and not record.isRule -%}
            {{ record.id }} * {{ record.compartment }}{{ '; ' if not loop.last }}
        {%- else -%}
            {{ record.id }}{{ '; ' if not loop.last }}
        {%- endif %}
        {%- endfor %}];

        % reinitialization by events
        y__ = ReinitY0(time, y0__);
    end

    %%% Check events conditions at `zero`
    function y__ = ReinitY0(time, y0)
        
        % size is number of active events
        cond_zero = Conditions(time, y0);
        ev_idxs = find(cond_zero==0, 1);
        
        if ~isempty(ev_idxs)
            for idx = 1:length(ev_idxs)
                ev = events_affects(idx);
                y__ = ev{1}(0.0,y0);
            end
        else
            y__ = y0;
        end
    end

    function status = OutputFunc(time, y, flag)
        switch flag
            case 'done'
                assignin('base', 'output', integrator);
            case 'affect'
                integrator(end, :) = shared_values;
            otherwise
                integrator = [integrator; shared_values];
        end
        status = 0;
    end

    function dydt = ODEFunc(time, y)

        dydt = zeros({{ dynamicRecords|length }}, 1);

        %%% Dynamic records annotation
        {%- for record in dynamicRecords %}
        %{{ loop.index }} - {{ record.id }}, {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {%- endfor %}

        %%% Output records
        {%- for ts in timeScales %}
        % {{ ts.title }} ({{ ts.units }}) {{ ts.notes }}
        {{ts.id}} = {{ ts.slope }} * time {# XXX #} + {{ ts.intercept }};
        {%- endfor %}
        {%- for record in sharedRecords %}
        % {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {% if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translateSymbol(pTranslator).toMatlabString(false) }};
        {%- elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ yTranslator[record.id] }} / {{ record.compartment }};
        {%- else -%}
        {{ record.id }} = {{ yTranslator[record.id] }};
        {%- endif -%}
        {%- endfor %}
        shared_values = [
            {%- for ts in timeScales -%}
            {{ ts.id }}{{ ', ' }}
            {%- endfor -%}
            {%- for record in sharedRecords -%}
            {{ record.id }}{{ ', ' if not loop.last }}
            {%- endfor -%}
        ];

        %%% Differential equations
        {%- for record in dynamicRecords %}
        dydt({{ loop.index }}) = {{ rhs[loop.index0] }};
        {%- endfor %}
    end

    {% for event in events | filter2('switcher.className', 'TimeSwitcher') %}
    function res = {{ event.switcher.id }}_condition(time, y)
        {%- set ev_start = pTranslator[event.switcher.start] if event.switcher.start is defined else event.switcher.startObj.numFloat %}
        {%- set ev_period = pTranslator[event.switcher.period] if event.switcher.period is defined else event.switcher.periodObj.numFloat %}
        {%- set ev_stop = pTranslator[event.switcher.stop] if event.switcher.stop is defined else event.switcher.stopObj.numFloat %}

        {% if ev_period is undefined -%}
        res = time - {{ ev_start }};
        {%- else -%}
        if (time - {{ ev_start }} <= 0.) || ({{ ev_period }} <= 0)
            res = time - {{ ev_start }};
        elseif (0. < time - {{ ev_start }}) && (time < {{ ev_stop if ev_stop is defined else 'Inf' }})
            res = (time - {{ ev_start }}) - floor((time - {{ ev_start }})/{{ ev_period }} + 0.5)*{{ ev_period }};
        else
            res = time - {{ ev_stop if ev_stop is defined else 'Inf' }};
        end
        {%- endif %}
    end
    {%- endfor %}

    {%- for event in events | filter2('switcher.className', 'DSwitcher') %}
    function res = {{ event.switcher.id }}_condition(time, y)
 
        %%% Records
        {%- for record in sharedRecords %}
        % {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {% if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translateSymbol(pTranslator).toMatlabString(false) }};
        {%- elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ yTranslator[record.id] }} / {{ record.compartment }};
        {%- else -%}
        {{ record.id }} = {{ yTranslator[record.id] }};
        {%- endif -%}
        {%- endfor %}

        {% set trigger = event.switcher.trigger.translateSymbol(pTranslator).toMatlabString(false) if event.switcher.trigger is defined else 'false' -%}
        if ({{ trigger }}) {#  && {{ pTranslator[event.switcher.id + '_'] }} #}
            res = 1;
        else 
            res = -1;
        end
    end
    {%- endfor %}

    {%- for event in events | filter2('switcher.className', 'CSwitcher') %}
    function res = {{ event.switcher.id }}_condition(time, y)
 
        %%% Records
        {%- for ts in timeScales %}
        % {{ ts.title }} ({{ ts.units }}) {{ ts.notes }}
        {{ts.id}} = {{ ts.slope }} * time {# XXX #} + {{ ts.intercept }};
        {%- endfor %}
        {%- for record in sharedRecords %}
        % {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {% if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translateSymbol(pTranslator).toMatlabString(false) }};
        {%- elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ yTranslator[record.id] }} / {{ record.compartment }};
        {%- else -%}
        {{ record.id }} = {{ yTranslator[record.id] }};
        {%- endif -%}
        {%- endfor %}

        res = {{ event.switcher.trigger.translateSymbol(pTranslator).toMatlabString(false) if event.switcher.trigger is defined else '-1' }};
    end
    {%- endfor %}

    {%- for event in events %}
    function y = {{ event.switcher.id }}_affect(time, y)

        %%% Records
        {%- for ts in timeScales %}
        % {{ ts.title }} ({{ ts.units }}) {{ ts.notes }}
        {{ts.id}} = {{ ts.slope }} * time {# XXX #} + {{ ts.intercept }};
        {%- endfor %}
        {%- for record in sharedRecords %}
        % {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {% if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translateSymbol(pTranslator).toMatlabString(false) }};
        {%- elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ yTranslator[record.id] }} / {{ record.compartment }};
        {%- else -%}
        {{ record.id }} = {{ yTranslator[record.id] }};
        {%- endif -%}
        {%- endfor %}

        if time ~= 0
            shared_values = [
            {%- for record in sharedRecords -%}
            {{ record.id }}{{ ', ' if not loop.last }}
            {%- endfor -%}
            ];
            OutputFunc(time, y, 'affect');
        end

        %%% recalculated values
        {%- for assignment in event.affect %}
        {% if assignment.instanceOf('Species') and not assignment.isAmount and not assignment.isRule -%}
        {{ idOrSynonim(assignment) }} = ({{ assignment.getAssignment(event.switcher.id).translateSymbol(pTranslator).toMatlabString(false) }}) * {{ assignment.compartment }};
        {%- else -%}
        {{ idOrSynonim(assignment) }} = {{ assignment.getAssignment(event.switcher.id).translateSymbol(pTranslator).toMatlabString(false) }};
        {%- endif -%}
        {%- endfor %}
        
    end
    {%- endfor %}

    function [res,isterminal,direction] = Conditions(time, y)
        vec = p({{constants|length + 1 }}:{{ constants|length + events|length }}) ~= 0;
        len = sum(vec);

        direction = ones(len, 1);
        isterminal = ones(len, 1);
        res_full = [
            {%- for event in events -%}
                {{ event.switcher.id }}_condition(time, y){{ '; ' if not loop.last }}
            {%- endfor -%}
        ];
        % reduce to number of active events
        res = res_full(vec);
    end
end
