{#-
  constants : all constants
  initRecords : all records SORTED by start_ and have start_ or isRule
  dynamicRecords : records with isDynamic = true, i.e. no rules, no boundary, have reactions
  extendedRuleRecords : all records SORTED by ode_
  staticRecords : records which are not dynamic nor rule
  events : array of {switcher, array of assignments with [switcher]}
  builderName
  options
  namespace: whole namespace
  rhs
  pTranslator
-#}

#= 
    This code was generated by heta-compiler {{ builderVersion }}
=#

__platform__ = (function()
{% for img in nsImages %}
{%- set timeScales = img.namespace.selectByClassName('TimeScale') | exclude2('id', 't') -%}
{% set id = img.namespace.spaceName %}
### create default constants
{{ id }}_constants_num_ = NamedTuple{(
  {% for con in img.constants | exclude2('num', undefined) -%}{# exclude const without num -#}
    :{{ con.id }},
  {%- endfor %}
)}(Float64[
  {% for con in img.constants | exclude2('num', undefined) -%}
    {{ con.num }},
  {%- endfor %}
])

### create default observables
{{ id }}_records_output_ = NamedTuple{(
  {% for ts in timeScales -%}
  :{{ts.id}},
  {%- endfor %}
  {%- for rec in img.namespace.selectByInstanceOf('Record') -%}
  :{{ rec.id }},
  {%- endfor %}
)}(Bool[
  {% for ts in timeScales -%}
  {{ ts.output | default('false') }},
  {%- endfor %}
  {%- for rec in img.namespace.selectByInstanceOf('Record') -%}
  {{ rec.output | default('false') }},
  {%- endfor %}
])

### create default events
{{ id }}_events_active_ = NamedTuple{(
  {% for event in img.events -%}
    :{{ event.switcher.id }},
  {%- endfor %}
)}(Bool[
  {% for event in img.events -%}
    {{ event.switcher.active }},
  {%- endfor %}
])

### vector of non-steady-state
{{ id }}_dynamic_nonss_ = NamedTuple{(
  {% for record in img.dynamicRecords -%}
    :{{ record.id }},
  {%- endfor %}
)}(Bool[
  {% for record in img.dynamicRecords -%}
    {{ not record.ss }},
  {%- endfor %}
])

### initialization of ODE variables and Records
function {{ id }}_init_func_(__constants__)
    # Heta initialize
    t = 0.0 # initial time
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in img.initRecords -%}
    {% if record.isRule -%}
    {{ record.id }} = {{ record.getAssignment('ode_').translateSymbol(img.pTranslator).toJuliaString() }}
    {%- else -%}
    {{ record.id }} = {{ record.getAssignment('start_').translateSymbol(img.pTranslator).toJuliaString() }}
    {%- endif %}
    {% endfor %}
    # save results

    return (
        {%- if img.dynamicRecords | length > 0 %}
        Float64[
        {%- for record in img.dynamicRecords %}
        {%- if record.instanceOf('Species') and not record.isAmount and not record.isRule %}
            {{ record.id }} * {{ record.compartment }}, 
        {%- else %}
            {{ record.id }}, 
        {%- endif %}
        {%- endfor %}
        ],
        {%- else -%}
        [ 0.0 ], # init for fake variable
        {%- endif %}
        Float64[
            __constants__...,
        {%- for record in img.staticRecords %}
            {{ record.id }}{{ '*' + record.compartment if record.instanceOf('Species') and not record.isAmount }},
        {%- endfor %}
        ]
    )
end
{% set constantMaxIndex = img.constants | length %}
{%- set staticMaxIndex = img.staticRecords | length %}
### calculate RHS of ODE
function {{ id }}_ode_func_(__du__, __u__, __p__, t)
    __constants__ = __p__[1:{{ constantMaxIndex }}]
    ({% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __p__[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __u__ {# TODO: replace by __u__[index] #}

    # Heta rules
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in img.odeRules %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% endif -%}
    {% endfor %}
    #__p__[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}] .= [{% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}]
    {%- if img.dynamicRecords | length > 0 %}
    __du__ .= [{% for record in img.dynamicRecords %}
      {{ img.rhs[loop.index0] }},  # d{{ record.id }}_/dt{{ ' SS!' if record.ss }}
    {%- endfor %}
    ]
    {%- else %}
    __du__ .= [ 1.0 ] # RHS for fake variable
    {%- endif %}
end

### output function
function {{ id }}_saving_generator_(__outputIds__::Vector{Symbol})
    # XXX: currently force amounts: s1_, s2_ are not supported
    __actual_indexes__ = indexin(__outputIds__, [
      {%- for ts in timeScales -%}
      :{{ts.id}},
      {%- endfor %}
      {%- for rec in img.namespace.selectByInstanceOf('Record') -%}
      :{{ rec.id }},
      {%- endfor -%}
    ])
    # check nothing in __actual_indexes__
    __wrongIndexes__ = findall(x -> x===nothing, __actual_indexes__)
    if length(__wrongIndexes__) > 0
      __wrongIds__ = __outputIds__[__wrongIndexes__]
      throw("Wrong identifiers: $(__wrongIds__)")
    end

    function saving_(__u__, t, __integrator__)
        __constants__ = __integrator__.p[1:{{ img.constants | length }}]
        ({% for record in img.staticRecords -%}
        {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
        {%- endfor %}) = __integrator__.p[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
        ({% for record in img.dynamicRecords -%}
        {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
        {%- endfor %}) = __u__{# TODO: replace by __u__[index] #}

        # Heta rules
        {%- for ts in timeScales %}
        {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
        {%- endfor %}
        {% for record in img.extendedRuleRecords %}
        {%- if record.isRule -%}
        {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
        {% elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
        {% endif -%}
        {%- endfor %}
        # force amount
        {%- for record in img.namespace.selectByInstanceOf('Species') | filter2('isAmount', true) %}
        {{ record.id }}_ = {{ record.id }}
        {%- endfor %}
        {%- for record in img.namespace.selectByInstanceOf('Species') | filter2('isRule', true) %}
        {{ record.id }}_ = {{ record.id }}{{ '*' + record.compartment if not record.isAmount }}
        {%- endfor %}

        return [
          {%- for ts in timeScales -%}
          {{ts.id}},
          {%- endfor %}
          {%- for rec in img.namespace.selectByInstanceOf('Record') -%}
          {{ rec.id }},
          {%- endfor -%}
        ][__actual_indexes__]
    end
end

### TIME EVENTS ###
{%- for event in img.events | filter2('switcher.className', 'TimeSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_tstops_func_(__constants__, __times__)
    {%- set ev_start = img.pTranslator[event.switcher.start] if event.switcher.start is defined else event.switcher.startObj.numFloat %}
    {%- set ev_period = img.pTranslator[event.switcher.period] if event.switcher.period is defined else event.switcher.periodObj.numFloat %}
    {%- set ev_stop = img.pTranslator[event.switcher.stop] if event.switcher.stop is defined else event.switcher.stopObj.numFloat %}
    {% if ev_period is undefined -%}
    return [{{ ev_start }}]
    {%- else -%}
    return {{ ev_period }} > 0.0 ? collect(range({{ ev_start }}, {{ ev_stop if ev_stop is defined else '__times__[2]' }}; step={{ ev_period }})) : [{{ ev_start }}]
    {%- endif %}
end
{%- endfor %}

### D EVENTS ###

{%- for event in img.events | filter2('switcher.className', 'DSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_condition_func_(__u__, t, __integrator__)
    __constants__ = __integrator__.p[1:{{ img.constants | length }}]
    ({% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __integrator__.p[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __u__

    # Heta rules
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in event.triggerRules %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% endif -%}
    {% endfor %}

    return ({{ event.switcher.trigger.translateSymbol(img.pTranslator).toJuliaString() if event.switcher.trigger is defined else 'false' }}) ? 1 : -1
end
{%- endfor %}

{%- for event in img.events | filter2('switcher.className', 'CSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_condition_func_(__u__, t, __integrator__)
    __constants__ = __integrator__.p[1:{{ img.constants | length }}]
    ({% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __integrator__.p[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __u__

    # Heta rules
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in event.triggerRules %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% endif -%}
    {% endfor %}

    return {{ event.switcher.trigger.translateSymbol(img.pTranslator).toJuliaString() if event.switcher.trigger is defined else '-1' }}
end
{%- endfor %}

### STOP EVENTS ###

{%- for event in img.events | filter2('switcher.className', 'StopSwitcher') %}
function {{ id }}_{{ event.switcher.id }}_condition_func_(__u__, t, __integrator__)
    __constants__ = __integrator__.p[1:{{ img.constants | length }}]
    ({% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __integrator__.p[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __u__

    # Heta rules
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in event.triggerRules %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% endif -%}
    {% endfor %}

    return {{ event.switcher.trigger.translateSymbol(img.pTranslator).toJuliaString() if event.switcher.trigger is defined else 'false' }}
end
{%- endfor %}

### event assignments
{% for event in img.events | exclude2('switcher.className', 'StopSwitcher') -%}
function {{ id }}_{{ event.switcher.id }}_affect_func_(__integrator__)
    t = __integrator__.t
    __constants__ = __integrator__.p[1:{{ img.constants | length }}]
    ({% for record in img.staticRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __integrator__.p[{{ constantMaxIndex + 1 }}:{{ constantMaxIndex + staticMaxIndex }}]
    ({% for record in img.dynamicRecords -%}
    {{ record.id }}{{ '_' if record.instanceOf('Species') and not record.isAmount }}, 
    {%- endfor %}) = __integrator__.u

    # Heta rules
    {%- for ts in timeScales %}
    {{ts.id}} = {{ ts.slope }} * t {# XXX #} + {{ ts.intercept }}
    {%- endfor %}
    {% for record in event.affectRules %}
    {%- if record.isRule -%}
    {{ record.id }} = {{ record.assignments.ode_.translateSymbol(img.pTranslator).toJuliaString() }}
    {% elif record.instanceOf('Species') and not record.isAmount -%}
    {{ record.id }} = {{ record.id }}_ / {{ record.compartment }}
    {% endif -%}
    {% endfor %}
    # recalculated values
    (
    {%- for assignment in event.affect -%}
    {{ assignment.id }}, 
    {%- endfor -%}
    ) = (
    {%- for assignment in event.affect -%}
    {{ assignment.getAssignment(event.switcher.id).translateSymbol(img.pTranslator).toJuliaString() }}, 
    {%- endfor -%}
    )
    
    # save results
    {% if img.dynamicRecords | length == 0 -%}
    __integrator__.u[[1]] = [
        0.0,
    ]
    {%- else -%}
    __integrator__.u[[
        {%- for record in img.dynamicRecords -%}
        {{ loop.index + ',' if record.getAssignment(event.switcher.id) is defined }}
        {%- endfor -%}
    ]] = [  
        {%- for record in img.dynamicRecords | exclude2('assignments.' + event.switcher.id, undefined) %}
        {{ record.id }}{{ '*' + record.compartment if record.instanceOf('Species') and not record.isAmount }}, 
        {%- endfor %}
    ]
    {%- endif %}
    __integrator__.p[[
        {%- for record in img.staticRecords -%}
        {{ loop.index + constantMaxIndex + ',' if record.getAssignment(event.switcher.id) is defined }}
        {%- endfor -%}
    ]] = [
        {%- for record in img.staticRecords | exclude2('assignments.' + event.switcher.id, undefined) %}
        {{ record.id }}{{ '*' + record.compartment if record.instanceOf('Species') and not record.isAmount }}, 
        {%- endfor %}
    ]
end
{% endfor %}

### MODELS ###

{{ id }}_model_ = (
  {{ id }}_init_func_,
  {{ id }}_ode_func_,
  NamedTuple{(
    {%- for event in img.events | filter2('switcher.className', 'TimeSwitcher') %}
    :{{ event.switcher.id }},
    {%- endfor %}
  )}([
    {%- for event in img.events | filter2('switcher.className', 'TimeSwitcher') %}
    ({{ id }}_{{ event.switcher.id }}_tstops_func_, {{ id }}_{{event.switcher.id}}_affect_func_, {{ event.switcher.atStart | default('false') }}),
    {%- endfor %}
  ]),
  NamedTuple{(
    {%- for event in img.events | exclude2('switcher.className', 'TimeSwitcher') | exclude2('switcher.className', 'StopSwitcher') %}
    :{{ event.switcher.id }},
    {%- endfor %}
  )}([
    {%- for event in img.events | exclude2('switcher.className', 'TimeSwitcher') | exclude2('switcher.className', 'StopSwitcher') %}
    ({{ id }}_{{ event.switcher.id }}_condition_func_, {{ id }}_{{event.switcher.id}}_affect_func_, {{ event.switcher.atStart | default('false') }}),
    {%- endfor %}
  ]),
  NamedTuple{(
    {%- for event in img.events | filter2('switcher.className', 'StopSwitcher') %}
    :{{ event.switcher.id }},
    {%- endfor %}
  )}([
    {%- for event in img.events | filter2('switcher.className', 'StopSwitcher') %}
    ({{ id }}_{{ event.switcher.id }}_condition_func_, {{ event.switcher.atStart | default('false') }}),
    {%- endfor %}
  ]),
  {{ id }}_saving_generator_,
  {{ id }}_constants_num_,
  {{ id }}_events_active_,
  {{ id }}_records_output_,
  {{ id }}_dynamic_nonss_
)

{%- endfor %}{# img #}

### OUTPUT ###

return (
  (
    {%- for img in nsImages %}
    {{ img.namespace.spaceName }} = {{ img.namespace.spaceName }}_model_,
    {%- endfor %}
  ),
  (),
  "{{ builderVersion }}"
)

end
)()