{#-
  constants : all constants
  initRecords : all records SORTED by start_ and have start_ or isRule
  dynamicRecords : records with isDynamic = true, i.e. no rules, no boundary, have reactions
  extendedRuleRecords : all records SORTED by ode_
  staticRecords : records which are not dynamic nor rule
  events : array of {switcher, array of assignments with [switcher]}
  builderName
  options
  namespace: whole namespace
  rhs
  pTranslator
-#}
{%- set timeScales = namespace.selectByClassName('TimeScale') | exclude2('id', 't') -%}
#= 
    This code was generated by heta-compiler {{ builderVersion }}
=#

function __get_{{ namespace.spaceName }}_model__()

### Define independent and dependent variables ###

@variables t
__ruleVariables__ = @variables
{%- for rec in namespace.selectByInstanceOf('Record') %}
{%- if rec.isRule %} {{ rec.id }}(t)
{%- elif rec.instanceOf('Species') %} {{ rec.id }}(t){% endif %}
{%- endfor %}
{%- for ts in timeScales %} {{ ts.id }}(t){% endfor %}
__dynamicVariables__ = @variables
{%- for rec in dynamicRecords %}
{%- if rec.instanceOf('Species') %} _{{ rec.id }}_(t)
{%- else %} {{ rec.id }}(t){% endif %}
{%- endfor %}

### Define potential algebraic variables ###

### Define parameters (constants and statics) ###
__constParameters__ = @parameters{% for con in namespace.selectByInstanceOf('Const') %} {{ con.id }}{% endfor %}
__staticParameters__ = @parameters
{%- for rec in staticRecords %}
{%- if rec.instanceOf('Species') %} _{{ rec.id }}_{% else %} {{ rec.id }}{% endif %}
{%- endfor %}

### Define an operator for the differentiation w.r.t. time
__D__ = Differential(t)

### ODE Equations ###
__eqs__ = [
  # extended rules
{%- for rec in namespace.selectByInstanceOf('Record') %}
{%- if rec.isRule %}
  {{ rec.id }} ~ {{ rec.getAssignment('ode_').toJuliaString(true) }},
{%- elif rec.instanceOf('Species') %}
  {{ rec.id }} ~ _{{ rec.id }}_{{ '/ ' + rec.compartment if not rec.isAmount==true }},
{%- endif %}
{%- endfor %}
{%- for ts in timeScales %}
  {{ ts.id }} ~ {{ ts.slope }} * t + {{ ts.intercept }},
{%- endfor %}

  # ODEs
{%- for record in dynamicRecords %}
  __D__({{ '_' + record.id + '_' if record.instanceOf('Species') else record.id }}) ~ {{ rhs[loop.index0] }}, # d{{ record.id }}/dt{{ ' SS!' if record.ss }}
{%- endfor %}
]

### TIME EVENTS ###

{%- for event in events | filter2('switcher.className', 'TimeSwitcher') %}
function __{{ event.switcher.id }}_tstops__(__const__, __times__)
    {%- set ev_start = pTranslator[event.switcher.start] if event.switcher.start is defined else event.switcher.startObj.numFloat %}
    {%- set ev_period = pTranslator[event.switcher.period] if event.switcher.period is defined else event.switcher.periodObj.numFloat %}
    {%- set ev_stop = pTranslator[event.switcher.stop] if event.switcher.stop is defined else event.switcher.stopObj.numFloat %}
    {% if ev_period is undefined -%}
    return [{{ ev_start }}]
    {%- else -%}
    return {{ ev_period }} > 0.0 ? collect(range({{ ev_start }}, {{ ev_stop if ev_stop is defined else '__times__[2]' }}; step={{ ev_period }})) : [{{ ev_start }}]
    {%- endif %}
end
{%- endfor %}

### C EVENTS ###

{%- for event in events | filter2('switcher.className', 'DSwitcher') %}
__{{ event.switcher.id }}_condition__ = [(({{ event.switcher.trigger.toJuliaString(true) if event.switcher.trigger is defined else 'false' }}) ? 1 : -1) ~ 0.0]
{%- endfor %}

{%- for event in events | filter2('switcher.className', 'CSwitcher') %}
__{{ event.switcher.id }}_condition__ = [{{ event.switcher.trigger.toJuliaString(true) if event.switcher.trigger is defined else '-1' }} ~ 0.0]
{%- endfor %}

### STOP EVENTS ###

{%- for event in events | filter2('switcher.className', 'StopSwitcher') %}
__{{ event.switcher.id }}_condition__ = [{{ event.switcher.trigger.toJuliaString(true) if event.switcher.trigger is defined else 'false' }} ~ 0.0]
{%- endfor %}

### EVENTS ASSIGNMENTS ###
{% for event in events | exclude2('switcher.className', 'StopSwitcher') -%}
__{{ event.switcher.id }}_affect__ = [
  {%- for assignment in event.affect %}
  {%- if assignment.instanceOf('Species') %}
    __{{ assignment.id }}__ ~ ({{ assignment.getAssignment(event.switcher.id).toJuliaString(true) }}){{ ' * ' + assignment.compartment if not assignment.isAmount }},
  {%- else %}
    {{ assignment.id }} ~ {{ assignment.getAssignment(event.switcher.id).toJuliaString(true) }},
  {%- endif %}
  {%- endfor %}
]
{% endfor %}

### Initialization ###

__constValues__ = [
{%- for con in constants %}
  {{ con.id }} => {{ con.num }},
{%- endfor %}
]

__init__ = [
{%- for rec in namespace.selectByInstanceOf('Record') %}
  {{ rec.id }} => {{ rec.getAssignment('start_').toJuliaString(true) if rec.getAssignment('start_') is defined else rec.getAssignment('ode_').toJuliaString(true)}},
{%- endfor %}
]

__amountsInit__ = [
  {%- for rec in namespace.selectByInstanceOf('Species') | exclude2('isRule', true) %}
    _{{ rec.id }}_ => {{ rec.id }}{{ ' * ' + rec.compartment if not rec.isAmount }},
  {%- endfor %}
]

### ODESystem definition ###
__sys__ = ODESystem(__eqs__, t, [__dynamicVariables__; __ruleVariables__], [__constParameters__; __staticParameters__],
  name = :{{ namespace.spaceName }},
  discrete_events = [],
  defaults = [__constValues__; __init__; __amountsInit__]
)

return (
  structural_simplify(__sys__),
  [__constValues__; __init__; __amountsInit__],
  NamedTuple{(
    {%- for event in events | filter2('switcher.className', 'TimeSwitcher') -%}
    :{{ event.switcher.id }}, {% endfor -%}
  )}([
    {%- for event in events | filter2('switcher.className', 'TimeSwitcher') -%}
    (__{{ event.switcher.id }}_tstops__, __{{event.switcher.id}}_affect__, {{ event.switcher.atStart | default('false') }}), {% endfor -%}
  ]),
  NamedTuple{(
    {%- for event in events | exclude2('switcher.className', 'TimeSwitcher') | exclude2('switcher.className', 'StopSwitcher') -%}
    :{{ event.switcher.id }}, {% endfor -%}
  )}([
    {%- for event in events | exclude2('switcher.className', 'TimeSwitcher') | exclude2('switcher.className', 'StopSwitcher') -%}
    (__{{ event.switcher.id }}_condition__, __{{event.switcher.id}}_affect__, {{ event.switcher.atStart | default('false') }}), {% endfor -%}
  ]),
  NamedTuple{(
    {%- for event in events | filter2('switcher.className', 'StopSwitcher') -%}
    :{{ event.switcher.id }}, {% endfor -%}
  )}([
    {%- for event in events | filter2('switcher.className', 'StopSwitcher') -%}
    (__{{ event.switcher.id }}_condition__, {{ event.switcher.atStart | default('false') }}), {% endfor -%}
  ]),
)

end # function __get_{{ namespace.spaceName }}_model__

__model__ = __get_{{ namespace.spaceName }}_model__()