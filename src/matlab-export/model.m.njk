{% macro idOrSynonim(component) %}{# if no Synonim in translator, than use id #}
{%- if translator.symbolName[component.id] -%}
{{ translator.symbolName[component.id] }}
{%- else -%}
{{ component.id }}
{%- endif -%}
{% endmacro -%}

%%%% This code was generated by {{ builderName }}
% {{ option.title + '.' if option.title}}{{ options.notes }}

function [ode_func, out_func, y0_, events_] = {{ options.id }}_Model(p)

    ode_func = @ODEFunc;
    out_func = @OutputFunc;
    y0_ = InitFunc();

    %%% Initialization of dynamic records
    function y = InitFunc()
        y = zeros({{ dynamicRecords|length }}, 1);

        {%- for record in initRecords %}
        {% if record.instanceOf('Species') and not record.isAmount and not record.implicitBoundary -%}
        {{ idOrSynonim(record) }} = ({{ record.getAssignment('start_').translate(translator).toMatlabString() }}) * {{ idOrSynonim(record.compartmentObj) }}; % {{ record.id }}, {{ record.title }} ({{ record.units }})
        {%- else -%}
        {{ idOrSynonim(record) }} = {{ record.getAssignment('start_').translate(translator).toMatlabString() }}; % {{ record.id }}, {{ record.title }} ({{ record.units }})
        {%- endif -%}
        {%- endfor %}
    end

    % shared variable
    shared_values = zeros(1, {{ outputRecords|length }});

    function status = OutputFunc(t, y, flag)
        persistent integrator;

        switch (flag)
        case 'init'
        integrator = shared_values;
        case []
        integrator = [integrator; shared_values];
        case 'done'
        assignin('base', 'output', integrator);
        end
        status = 0;
    end

    function dydt = ODEFunc(t, y)

        dydt = zeros({{ dynamicRecords|length }}, 1);

        %%% Dynamic records annotation
        {%- for record in dynamicRecords %}
        %{{ loop.index }} - {{ record.id }}, {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {%- endfor %}

        %%% Output records
        {%- for record in outputRecords %}
        % {{ record.title }} ({{ record.units }}) {{ record.notes }}
        {% if record.implicitBoundary -%}
        {{ record.id }} = {{ record.assignments.ode_.translate(pTranslator).toMatlabString() }};
        {%- elif record.instanceOf('Species') and not record.isAmount -%}
        {{ record.id }} = {{ yTranslator.symbolName[record.id] }} / {{ record.compartment }};
        {%- else -%}
        {{ record.id }} = {{ yTranslator.symbolName[record.id] }};
        {%- endif -%}
        {%- endfor %}
        shared_values = [{% for record in outputRecords -%}
        {{ record.id }}{{ ', ' if not loop.last }}
        {%- endfor %}];

        %%% Differential equations
        {%- for record in dynamicRecords %}
        dydt({{ loop.index }}) = {{ rhs[loop.index0] }};
        {%- endfor %}
    end

    {% for event in events -%}
    function [res, isterminal, direction] = {{ event.switcher.id }}_condition(t, y)
        direction = 1; % [];
        isterminal = 1;
        
        ev_start = {{ event.switcher.startObj.num }};
        ev_period = {{ event.switcher.periodObj.num if event.switcher.periodObj.num is defined else '[]'}};
        ev_repeatCount = {{ event.switcher.getRepeatCountInt() }};
        
        flag = (t - ev_start)/ev_period;
        
        if flag <= 0.
            res = flag;
        elseif (0. < flag) && (flag < ev_repeatCount)
            res = flag - floor(flag + 0.5);
        else
            res = flag - ev_repeatCount;
        end
    end
    function out = {{ event.switcher.id }}_affect()
    end
    {{ event.switcher.id }}_ = { @{{ event.switcher.id }}_condition, @{{ event.switcher.id }}_affect };
    {%- endfor %}

    events_ = [
    {%- for event in events %}{{ event.switcher.id }}_{{ ', ' if not loop.last }}{% endfor -%}
    ];
end